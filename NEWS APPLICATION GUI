import io
import webbrowser
import requests
from tkinter import *
from urllib.request import urlopen
from PIL import ImageTk, Image


class NewsApp:

    def __init__(self):
        # fetch data from the internet
        self.data = requests.get(
            "https://newsdata.io/api/1/latest?apikey=pub_e2327bc35ed249a89ed19e1c8a01c138&q=ind&category=crime,entertainment,environment,sports&language=en,hi,fr&country=in,bd,af,de,ch"
        ).json()

        # Debug: print the actual structure  
        print("API Response keys:", list(self.data.keys()))
        if "results" in self.data:
            print("Number of articles:", len(self.data["results"]))

        # load the GUI
        self.open_gui()
        # display the 1st news items
        self.load_news_item(0)
        # start the GUI event loop
        self.root.mainloop()

    def open_gui(self):
        self.root = Tk()
        self.root.geometry("600x800")
        self.root.title("News GUI")
        self.root.resizable(0, 0)
        self.root.configure(background="black")

    def clear(self):
        for i in self.root.pack_slaves():
            i.destroy()

    def load_news_item(self, index):
        # clear the screen for the new news item
        self.clear()

        # Check if we have articles in the response
        if "results" not in self.data or not self.data["results"]:
            error_label = Label(self.root,
                                text="No news articles found!",
                                bg="black",
                                fg="red",
                                font=("Georgia", 16))
            error_label.pack(pady=20)
            return

        # Get the article
        article = self.data["results"][index]

        # image - handle case where image_url might be None
        if article.get("image_url"):
            try:
                img_url = article["image_url"]
                raw_data = urlopen(img_url).read()
                im = Image.open(io.BytesIO(raw_data)).resize((350, 250))
                photo = ImageTk.PhotoImage(im)

                label = Label(self.root, image=photo)
                label.pack(
                )  # ye line isliye likhi hai kyuki python garbage collector ko pata nahi chalta ki ye image use ho raha hai
                label.image = photo  # Keep a reference
            except Exception as e:
                print(f"Error loading image: {e}")
                no_img_label = Label(self.root,
                                     text="No Image Available",
                                     bg="gray",
                                     fg="white",
                                     width=15,
                                     height=15)
                no_img_label.pack()
        else:
            no_img_label = Label(self.root,
                                 text="No Image Available",
                                 bg="gray",
                                 fg="white",
                                 width=50,
                                 height=15)
            no_img_label.pack()

        heading = Label(self.root,
                        text=article.get("title", "No Title"),
                        bg="black",
                        fg="white",
                        wraplength=350,
                        justify="center")
        # ye text kate na isliye wraplength use hota hai
        heading.pack(pady=(10, 20))
        heading.configure(font=("Georgia", 15, "bold"))

        details = Label(self.root,
                        text=article.get("description", "No Description"),
                        bg="black",
                        fg="white",
                        wraplength=350,
                        justify="center")
        # ye text kate na isliye wraplength use hota hai
        details.pack(pady=(4, 20))
        details.configure(font=("Georgia", 12, "bold"))

        frame = Frame(self.root, bg="black")
        frame.pack(expand=True, fill=BOTH)

        prev = Button(frame, text="PREVIOUS PAGE", width=22, height=4,command = lambda: self.load_news_item(index - 1))
        prev.pack(side=LEFT)

        read = Button(frame,
                      text="READ MORE",
                      width=22,
                      height=4,
                      command=lambda: self.open_link(self.data["results"][
                          index]["link"]))
        read.pack(side=LEFT)

        next = Button(frame,
                      text="NEXT PAGE",
                      width=22,
                      height=4,
                      command=lambda: self.load_news_item(index + 1))
        # next=Button(frame,text="NEXT PAGE",width=22,height=4,command=lambda: self.load_news_item(index+1))
        next.pack(side=LEFT)

    def open_link(self, url):
        webbrowser.open(url)


obj = NewsApp()
